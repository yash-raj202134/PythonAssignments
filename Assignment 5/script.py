# Assignment module 5    - developed by Yash Raj

# Problem Statement
'''
Assume that you have to create a GUI-based form for the same book table that
you created in the Module 5 assignment. 
The form should have the following features: 

1.It should have the basic functionality and widgets.

2. It should fetch the price of the book when the 'find price' button is clicked.

3. The quantity field should only accept integer data. 

4. When the 'find total amount' button is clicked, the field should display the total 
   amount by calculating the product of the price and quantity. 

5. If the book title enter is not present in the database, a message saying the book 
   is not found should be displayed.
'''
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'abc.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox

import sqlite3 as sq

from numpy import record
bookstore=sq.connect('books.db')

class Ui_Book_Finder(object):
    def setupUi(self, Book_Finder):
        Book_Finder.setObjectName("Book_Finder")
        Book_Finder.setWindowModality(QtCore.Qt.NonModal)
        Book_Finder.resize(659, 358)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        Book_Finder.setFont(font)
        Book_Finder.setMouseTracking(False)
        icon = QtGui.QIcon.fromTheme("Book")
        Book_Finder.setWindowIcon(icon)
        Book_Finder.setAutoFillBackground(True)
        Book_Finder.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(Book_Finder)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.l3 = QtWidgets.QLineEdit(self.centralwidget)
        self.l3.setObjectName("l3")
        self.gridLayout.addWidget(self.l3, 3, 2, 1, 1, QtCore.Qt.AlignLeft)
        self.l2 = QtWidgets.QLineEdit(self.centralwidget)
        self.l2.setObjectName("l2")
        self.gridLayout.addWidget(self.l2, 1, 2, 1, 1, QtCore.Qt.AlignLeft)
        self.b1 = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setItalic(True)
        self.b1.setFont(font)
        self.b1.setObjectName("b1")
        self.gridLayout.addWidget(self.b1, 0, 3, 1, 1)
        self.l1 = QtWidgets.QLineEdit(self.centralwidget)
        self.l1.setObjectName("l1")
        self.gridLayout.addWidget(self.l1, 0, 2, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 25, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem, 2, 2, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 6, 1, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 3, 1, 1, 1)
        self.lable_1 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.lable_1.setFont(font)
        self.lable_1.setObjectName("lable_1")
        self.gridLayout.addWidget(self.lable_1, 0, 1, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 1, 1, 1)
        self.b2 = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setItalic(True)
        self.b2.setFont(font)
        self.b2.setObjectName("b2")
        self.gridLayout.addWidget(self.b2, 4, 2, 1, 1, QtCore.Qt.AlignLeft)
        self.l4 = QtWidgets.QLineEdit(self.centralwidget)
        self.l4.setObjectName("l4")
        self.gridLayout.addWidget(self.l4, 6, 2, 1, 1, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.horizontalLayout.addLayout(self.gridLayout)
        Book_Finder.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Book_Finder)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 659, 18))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        Book_Finder.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Book_Finder)
        self.statusbar.setObjectName("statusbar")
        Book_Finder.setStatusBar(self.statusbar)
        self.actionfor_more_help_visit_our_website = QtWidgets.QAction(Book_Finder)
        self.actionfor_more_help_visit_our_website.setObjectName("actionfor_more_help_visit_our_website")
        self.actionOpen = QtWidgets.QAction(Book_Finder)
        self.actionOpen.setObjectName("actionOpen")
        self.actionNew = QtWidgets.QAction(Book_Finder)
        self.actionNew.setObjectName("actionNew")
        self.actionRecent = QtWidgets.QAction(Book_Finder)
        self.actionRecent.setObjectName("actionRecent")
        self.actionGenerate_Receipt = QtWidgets.QAction(Book_Finder)
        self.actionGenerate_Receipt.setObjectName("actionGenerate_Receipt")
        self.actionSave = QtWidgets.QAction(Book_Finder)
        self.actionSave.setObjectName("actionSave")
        self.actionSave_As = QtWidgets.QAction(Book_Finder)
        self.actionSave_As.setObjectName("actionSave_As")
        self.actionExit = QtWidgets.QAction(Book_Finder)
        self.actionExit.setObjectName("actionExit")
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionRecent)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionGenerate_Receipt)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_As)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuHelp.addAction(self.actionfor_more_help_visit_our_website)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(Book_Finder)
        QtCore.QMetaObject.connectSlotsByName(Book_Finder)
        self.l3.setValidator(QtGui.QIntValidator())

    def retranslateUi(self, Book_Finder):
        _translate = QtCore.QCoreApplication.translate
        Book_Finder.setWindowTitle(_translate("Book_Finder", "Book Finder"))
        self.b1.setText(_translate("Book_Finder", "Get price"))
        self.label_4.setText(_translate("Book_Finder", "  Total "))
        self.label_3.setText(_translate("Book_Finder", "  Quantity "))
        self.lable_1.setText(_translate("Book_Finder", "  Book Title"))
        self.label_2.setText(_translate("Book_Finder", "  Price "))
        self.b2.setText(_translate("Book_Finder", "Find total"))
        self.menuFile.setTitle(_translate("Book_Finder", "File"))
        self.menuHelp.setTitle(_translate("Book_Finder", "Help"))
        self.actionfor_more_help_visit_our_website.setText(_translate("Book_Finder", "For more help visit our website"))
        self.actionOpen.setText(_translate("Book_Finder", "Open"))
        self.actionNew.setText(_translate("Book_Finder", "New"))
        self.actionRecent.setText(_translate("Book_Finder", "Recent"))
        self.actionGenerate_Receipt.setText(_translate("Book_Finder", "Generate Receipt"))
        self.actionSave.setText(_translate("Book_Finder", "Save "))
        self.actionSave_As.setText(_translate("Book_Finder", "Save As"))
        self.actionExit.setText(_translate("Book_Finder", "Exit"))
        self.b1.clicked.connect(self.getBook)  
        self.b2.clicked.connect(self.calculatePrice)  
        
    def getBook(self):
        user_input=self.l1.text()
        curBook = bookstore.cursor()
        sql="SELECT * FROM item WHERE Title='"+user_input+"';"
        try:
            curBook.execute(sql)
            record=curBook.fetchone()
            self.l2.setText("Rs. "+str(record[3]))
            return record
        except:
            dialog=QMessageBox(Book_Finder)
            dialog.setText(f"Sorry no book named {user_input} found in the database !")
            dialog.setWindowTitle(" Book Finder")
            dialog.setIcon(QMessageBox.Warning)
            dialog.exec_()
            return
        
    
    def calculatePrice(self):
        record = self.getBook()
        no_of_copies=int(self.l3.text())
        total_price=no_of_copies*record[3]
        self.l4.setText("Rs. "+str(total_price))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Book_Finder = QtWidgets.QMainWindow()
    ui = Ui_Book_Finder()
    ui.setupUi(Book_Finder)
    Book_Finder.show()
    sys.exit(app.exec_())



